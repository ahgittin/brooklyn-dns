
services:
-
    type: org.apache.brooklyn.entity.software.base.VanillaSoftwareProcess
    name: Brooklyn DNS Registration Hook
    description: "Configures the VM to register with and use the DNS server located at the brooklyn_dns.address config key (IP address string)"
    
    brooklyn.config:
      # tells our DNS server to register this node (you can set this on other nodes also) 
      brooklyn_dns.enabled: true
      
    brooklyn.initializers:
    - # this is the sensor for the hostname the DNS server will register
      type: org.apache.brooklyn.core.sensor.StaticSensor
      brooklyn.config:
        name: brooklyn_dns.host.basename
        static.value: $brooklyn:entityId()
    - # this is the sensor for the hostname the DNS server will register
      # TODO use a transformer to give
      # $brooklyn:formatString("%s.%s", $brooklyn:attributeWhenReady("brooklyn_dns.host.basename"), $brooklyn:config("brooklyn_dns.domain"))
      type: org.apache.brooklyn.core.sensor.StaticSensor
      brooklyn.config:
        name: brooklyn_dns.host.name
        static.value: $brooklyn:formatString("%s.%s", $brooklyn:entityId(), $brooklyn:config("brooklyn_dns.domain"))

    env:
      # TODO make brooklyn_dns.server a parameter
      BROOKLYN_DNS_SERVER_ADDRESS: $brooklyn:config("brooklyn_dns.address")
      MY_HOSTNAME: $brooklyn:attributeWhenReady("brooklyn_dns.host.name")
      
    install.command: |
      # put at front of resolv.conf 
      echo nameserver $BROOKLYN_DNS_SERVER_ADDRESS | sudo cat - /etc/resolv.conf | sudo tee /etc/resolv.conf
      # also put in this head file if resolvconf is used (to autogen the file above)
      if [ -f /etc/resolvconf/resolv.conf.d/head ] ; then
        echo nameserver $BROOKLYN_DNS_SERVER_ADDRESS | sudo cat - /etc/resolvconf/resolv.conf.d/head | sudo tee /etc/resolvconf/resolv.conf.d/head
        sudo resolvconf -u
      fi
      
    launch.command:
      echo "(nothing needed to make this run, BIND should pick us up)"
      
    checkRunning.command:
      ping -c 1 $MY_HOSTNAME
